%YAML 1.2
---
name: Turtle (graphy)
file_extensions:
  - ttl
scope: source.ttl

variables:
  # CONTEXT CONTROL PATTERNS ###################################################
  MAT_word_or_any_one_char: '\w+|\S'
  PLA_anything: '(?=[\S\s])'


  BNODE_LABEL: '(?:{{PN_CHARS_U}}|[0-9])(?:(?:{{PN_CHARS}}|\.)*{{PN_CHARS}})?'

  # TURTLE GRAMMAR PRODUCTIONS FOR TERMINALS ###################################
  IRI: '(?:[^\x{00}-\x{20}<>"{}|^`\\]*)'
  EXPONENT: '([eE])([+-]?)([0-9]+)'
  STRING_SHORT: '[^\x{22}\x{5C}\x{0A}\x{0D}]'
  ECHAR_SINGLE: '(?:\\[tbnrf''\\])'
  ECHAR_DOUBLE: '(?:\\[tbnrf"\\])'
  UCHAR: '(?:\\u{{HEX}}{4}|\\U{{HEX}}{8})'
  PN_CHARS_BASE: '[A-Za-z\x{00C0}-\x{00D6}\x{00D8}-\x{00F6}\x{00F8}-\x{02FF}\x{0370}-\x{037D}\x{037F}-\x{1FFF}\x{200C}-\x{200D}\x{2070}-\x{218F}\x{2C00}-\x{2FEF}\x{3001}-\x{D7FF}\x{F900}-\x{FDCF}\x{FDF0}-\x{FFFD}\x{10000}-\x{EFFFF}]'
  PN_CHARS_U: '(?:{{PN_CHARS_BASE}}|_)'
  PN_CHARS: '(?:{{PN_CHARS_U}}|\-|[0-9\x{00B7}\x{0300}-\x{036F}\x{203F}\x{2040}])'
  PN_PREFIX: >-
    (?x)
      (?:
        {{PN_CHARS_BASE}}
        (?:
          (?:{{PN_CHARS}}|\.)*
          {{PN_CHARS}}
        )?
      )
  PLX: '(?:%{{HEX}}{2}|{{PN_LOCAL_ESC}})'
  PN_LOCAL: >-
    (?x)
      (?:
        (?:
          {{PN_CHARS_U}}|:|[0-9]
        )
        (?:
          (?:
            {{PN_CHARS}}|\.|:
          )*
          (?:
            {{PN_CHARS}}|:
          )
        )?
      )
  HEX: '(?:[0-9A-Fa-f])'
  PN_LOCAL_ESC: '\\[-_~.!$&''()*+,;=/?#@%]'

contexts:
  prototype:
    - match: '\s+'
      scope: meta.whitespace.ttl

# If no match has been made, gently and quietly pop
  else_pop:
    - match: '{{PLA_anything}}'
      pop: true

  # Brand the evil token, but stand your ground.
  other_illegal:
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.ttl

  # Reject it and run.
  other_illegal_pop:
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.ttl
      pop: true


  main:
    - include: prefixDeclaration
    - include: baseDeclaration
    - include: triple
    - include: comment
    - include: other_illegal

  comment:
    - match: '#'
      scope: punctuation.definition.comment.ttl
      push: line_comment

  line_comment:
    - meta_scope: comment.line.ttl
    - match: '$'
      pop: true

  prefixDeclaration:
    - match: '((@)prefix)\b'
      captures:
        1: storage.type.prefix.at.ttl
        2: punctuation.definition.storage.prefix.at.ttl
      push: [prefixDeclaration_EOL, prefixDeclaration_AFTER_KEYWORD]
    - match: 'PREFIX\b'
      scope: storage.type.prefix.sparql.upper.ttl
      push: prefixDeclaration_AFTER_KEYWORD
    - match: 'prefix\b'
      scope: storage.type.prefix.sparql.lower.ttl
      push: prefixDeclaration_AFTER_KEYWORD
    - match: '(?i)prefix\b'
      scope: storage.type.prefix.sparql.mixed.ttl
      push: prefixDeclaration_AFTER_KEYWORD

  prefixDeclaration_AFTER_KEYWORD:
    - match: '({{PN_PREFIX}}?)(:)'
      captures: 
        1: variable.other.readwrite.prefix-name.namespace.prefix-declaration.ttl
        2: punctuation.separator.prefix-name.namespace.prefix-declaration.ttl
      set: prefixDeclaration_AFTER_NAME
    - include: comment
    - include: other_illegal_pop

  prefixDeclaration_AFTER_NAME:
    - match: '<'
      scope: punctuation.definition.iri.begin.prefix-declaration.ttl
      set: prefixDeclaration_AFTER_IRI_BEGIN
    - include: comment
    - include: other_illegal_pop

  prefixDeclaration_AFTER_IRI_BEGIN:
    - match: '{{IRI}}'
      scope: string.unquoted.iri.prefix-declaration.ttl
    - match: '{{UCHAR}}'
      scope: constant.character.escape.iri.prefix-declaration.ttl
    - match: '>'
      scope: punctuation.definition.iri.end.prefix-declaration.ttl
      pop: true
    - include: other_illegal_pop

  prefixDeclaration_EOL:
    - meta_include_prototype: false
    - match: '\n'
      scope: invalid.illegal.token.missing-prefix-declaration-terminator.ttl
    - match: '\.'
      scope: punctuation.terminator.prefix-declaration.ttl
      pop: true
    - include: comment
    - include: other_illegal_pop

  baseDeclaration:
    - match: '((@)base)\b'
      captures: 
        1: storage.type.base.at.ttl
        2: punctuation.definition.storage.base.at.all
      push: [baseDeclaration_EOL, baseDeclaration_AFTER_KEYWORD]
    - match: 'BASE\b'
      scope: storage.type.base.sparql.upper.ttl
      push: baseDeclaration_AFTER_KEYWORD
    - match: 'base\b'
      scope: storage.type.base.sparql.lower.ttl
      push: baseDeclaration_AFTER_KEYWORD
    - match: '(?i)base\b'
      scope: storage.type.base.sparql.mixed.ttl
      push: baseDeclaration_AFTER_KEYWORD

  baseDeclaration_AFTER_KEYWORD:
    - match: '<'
      scope: punctuation.definition.iri.begin.base-declaration.ttl
      set: baseDeclaration_AFTER_IRI_BEGIN
    - include: comment
    - include: other_illegal_pop

  baseDeclaration_AFTER_IRI_BEGIN:
    - match: '{{IRI}}'
      scope: string.unquoted.iri.base-declaration.ttl
    - match: '{{UCHAR}}'
      scope: constant.character.escape.iri.base-declaration.ttl
    - match: '>'
      scope: punctuation.definition.iri.end.base-declaration.ttl
      pop: true
    - include: other_illegal_pop

  baseDeclaration_EOL:
    - meta_include_prototype: false
    - match: '\n'
      scope: invalid.illegal.token.missing-base-declaration-terminator.ttl
    - match: '\.'
      captures: 
        1: meta.whitespace.ttl
        2: punctuation.terminator.base-declaration.ttl
      pop: true
    - include: comment
    - include: other_illegal_pop

  triple:
    - match: '<'
      scope: punctuation.definition.iri.begin.subject.ttl
      push: [triple_TERMINATE, triple_AFTER_OBJECT, triple_AFTER_SUBJECT_IRI_BEGIN]
    - match: '_:'
      scope: variable.other.readwrite.blank-node.underscore.subject.ttl
      push: [triple_TERMINATE, triple_AFTER_OBJECT, triple_AFTER_SUBJECT_BNODE_NS]
    - match: '\('
      scope: punctuation.definition.collection.begin.subject.ttl
      push: [triple_TERMINATE, triple_AFTER_SUBJECT, collection_TERMINATE, triple_AFTER_SUBJECT_COLLECTION_BEGIN]
    - match: '({{PN_PREFIX}}?)(:)'
      captures: 
        1: variable.other.readwrite.prefix-name.namespace.subject.ttl
        2: punctuation.separator.prefix-name.namespace.subject.ttl
      push: [triple_TERMINATE, triple_AFTER_OBJECT, triple_AFTER_SUBJECT_PNAME_NS]

  triple_AFTER_SUBJECT_IRI_BEGIN:
    - match: '{{IRI}}'
      scope: string.unquoted.iri.subject.ttl
    - match: '{{UCHAR}}'
      scope: constant.character.escape.iri.subject.ttl
    - match: '>'
      scope: punctuation.definition.iri.end.subject.ttl
      set: triple_AFTER_SUBJECT
    - include: other_illegal_pop

  triple_AFTER_SUBJECT_BNODE_NS:
    - match: '{{BNODE_LABEL}}'
      scope: variable.other.member.blank-node.label.object.ttl
      set: triple_AFTER_SUBJECT
    - include: other_illegal_pop

  triple_AFTER_SUBJECT_COLLECTION_BEGIN:
    - include: comment
    - match: '(?!\))'
      set: [triple_AFTER_SUBJECT_COLLECTION_BEGIN, triple_AFTER_PREDICATE]
    - match: '(?=\))'
      pop: true
    - include: other_illegal_pop

  triple_AFTER_SUBJECT_PNAME_NS:
    - meta_include_prototype: false
    - match: '{{PN_LOCAL}}'
      scope: variable.other.member.prefix-name.local.subject.ttl
    - match: '{{PLX}}'
      scope: constant.character.escape.prefix-name.local.subject.ttl
    - match: '(?=[\s\[])'
      set: triple_AFTER_SUBJECT
    - include: other_illegal_pop

  triple_AFTER_SUBJECT:
    - match: '<'
      scope: punctuation.definition.iri.begin.predicate.ttl
      set: triple_AFTER_PREDICATE_IRI_BEGIN
    - match: 'a'
      scope: support.constant.predicate.a.ttl
      set: triple_AFTER_PREDICATE
    - match: '({{PN_PREFIX}}?)(:)'
      captures: 
        1: variable.other.readwrite.prefix-name.namespace.predicate.ttl
        2: punctuation.separator.prefix-name.namespace.predicate.ttl
      set: triple_AFTER_PREDICATE_PNAME_NS
    - include: comment
    - include: other_illegal_pop

  triple_AFTER_PREDICATE_IRI_BEGIN:
    - match: '{{IRI}}'
      scope: string.unquoted.iri.predicate.ttl
    - match: '{{UCHAR}}'
      scope: constant.character.escape.iri.predicate.ttl
    - match: '>'
      scope: punctuation.definition.iri.end.predicate.ttl
      set: triple_AFTER_PREDICATE
    - include: other_illegal_pop

  triple_AFTER_PREDICATE_PNAME_NS:
    - meta_include_prototype: false
    - match: '{{PN_LOCAL}}'
      scope: variable.other.member.prefix-name.local.predicate.ttl
    - match: '{{PLX}}'
      scope: constant.character.escape.prefix-name.local.predicate.ttl
    - match: '\s'
      set: triple_AFTER_PREDICATE
    - include: other_illegal_pop

  triple_AFTER_PREDICATE:
    - match: '<'
      scope: punctuation.definition.iri.begin.object.ttl
      set: triple_AFTER_OBJECT_IRI_BEGIN
    - match: '_:'
      scope: variable.other.readwrite.blank-node.underscore.object.ttl
      set: triple_AFTER_OBJECT_BNODE_NS
    - match: '\('
      scope: punctuation.definition.collection.begin.object.ttl
      set: [collection_TERMINATE, triple_AFTER_OBJECT_COLLECTION_BEGIN]
    - match: '\['
      scope: punctuation.definition.blank-node-property-list.begin.object.ttl
      set: [blankNodePropertyList_TERMINATE, triple_AFTER_OBJECT, triple_AFTER_SUBJECT]
    - match: '({{PN_PREFIX}}?)(:)'
      captures: 
        1: variable.other.readwrite.prefix-name.namespace.object.ttl
        2: punctuation.separator.prefix-name.namespace.object.ttl
      set: triple_AFTER_OBJECT_PNAME_NS
    - match: '"""'
      scope: punctuation.definition.string.begin.literal.double.long.ttl
      set: triple_AFTER_OBJECT_LITERAL_DOUBLE_LONG_BEGIN
    - match: '"'
      scope: punctuation.definition.string.begin.literal.double.short.ttl
      set: triple_AFTER_OBJECT_LITERAL_DOUBLE_SHORT_BEGIN
    - match: ''''''''
      scope: punctuation.definition.string.begin.literal.single.long.ttl
      set: triple_AFTER_OBJECT_LITERAL_SINGLE_LONG_BEGIN
    - match: ''''
      scope: punctuation.definition.string.begin.literal.single.short.ttl
      set: triple_AFTER_OBJECT_LITERAL_SINGLE_SHORT_BEGIN
    - match: '(true)|(false)'
      captures: 
        1: constant.language.boolean.true.ttl
        2: constant.language.boolean.false.ttl
      pop: true
    - match: '((?:(\+)|(-))?([0-9]+)(\.)([0-9]*){{EXPONENT}})'
      captures:
        1: constant.numeric.decimal.ttl
        2: keyword.operator.arithmetic.sign.positive.ttl
        3: keyword.operator.arithmetic.sign.negative.ttl
        4: meta.numeric.decimal.characteristic.ttl
        5: punctuation.decimal.ttl
        6: meta.numeric.decimal.mantissa.ttl
        7: meta.numeric.exponent.e.ttl
        8: meta.numeric.exponent.sign.ttl
        9: meta.numeric.exponent.digit.ttl
      pop: true
    - match: '((?:(\+)|(-))?(\.)?([0-9]+){{EXPONENT}})'
      captures:
        1: constant.numeric.decimal.ttl
        2: keyword.operator.arithmetic.sign.positive.ttl
        3: keyword.operator.arithmetic.sign.negative.ttl
        4: punctuation.decimal.ttl
        5: meta.numeric.decimal.mantissa.ttl
        6: meta.numeric.exponent.e.ttl
        7: meta.numeric.exponent.sign.ttl
        8: meta.numeric.exponent.digit.ttl
      pop: true
    - match: '((?:(\+)|(-))?([0-9]*)(\.)([0-9]+))'
      captures:
        1: constant.numeric.decimal.ttl
        2: keyword.operator.arithmetic.sign.positive.ttl
        3: keyword.operator.arithmetic.sign.negative.ttl
        4: meta.numeric.decimal.characteristic.ttl
        5: punctuation.decimal.ttl
        6: meta.numeric.decimal.mantissa.ttl
      pop: true
    - match: '((?:(\+)|(-))?([0-9]+))'
      captures:
        1: constant.numeric.integer.ttl
        2: keyword.operator.arithmetic.sign.positive.ttl
        3: keyword.operator.arithmetic.sign.negative.ttl
      pop: true
    - include: comment
    - include: other_illegal_pop

  triple_AFTER_OBJECT_IRI_BEGIN:
    - match: '{{IRI}}'
      scope: string.unquoted.iri.object.ttl
    - match: '{{UCHAR}}'
      scope: constant.character.escape.iri.object.ttl
    - match: '>'
      scope: punctuation.definition.iri.end.object.ttl
      pop: true
    - include: other_illegal_pop

  triple_AFTER_OBJECT_BNODE_NS:
    - match: '{{BNODE_LABEL}}'
      scope: variable.other.member.blank-node.label.object.ttl
      pop: true
    - include: other_illegal_pop

  triple_AFTER_OBJECT_COLLECTION_BEGIN:
    - include: comment
    - match: '(?!\))'
      set: [triple_AFTER_OBJECT_COLLECTION_BEGIN, triple_AFTER_PREDICATE]
    - match: '(?=\))'
      pop: true
    - include: other_illegal_pop

  triple_AFTER_OBJECT_PNAME_NS:
    - meta_include_prototype: false
    - match: '{{PN_LOCAL}}'
      scope: variable.other.member.prefix-name.local.object.ttl
    - match: '{{PLX}}'
      scope: constant.character.escape.prefix-name.local.object.ttl
    - match: '\s'
      pop: true
    - include: triple_AFTER_OBJECT

  triple_AFTER_OBJECT_LITERAL_DOUBLE_LONG_BEGIN:
    - meta_scope: string.quoted.double.literal.long.ttl
    - include: literalDoubleLong_AFTER_QUOTE
    - match: '"""'
      scope: punctuation.definition.string.end.literal.double.long.ttl
      set: triple_AFTER_OBJECT_LITERAL_CONTENTS
    - match: '""'
      push:
        - include: literalDoubleLong_AFTER_QUOTE
        - include: else_pop
    - match: '"'
      push:
        - include: literalDoubleLong_AFTER_QUOTE
        - include: else_pop
    - include: other_illegal_pop

  literalDoubleLong_AFTER_QUOTE:
    - match: '[^"\\]'
      scope: string.quoted.double.literal.long.ttl
      set: triple_AFTER_OBJECT_LITERAL_DOUBLE_LONG_BEGIN
    - match: '{{ECHAR_DOUBLE}}'
      scope: string.quoted.double.literal.long.ttl constant.character.escape.literal.escape.long.ttl
      set: triple_AFTER_OBJECT_LITERAL_DOUBLE_LONG_BEGIN
    - match: '\\'''
      scope: string.quoted.double.literal.long.ttl constant.character.escape.literal.escape.pointless.long.ttl
      set: triple_AFTER_OBJECT_LITERAL_DOUBLE_LONG_BEGIN
    - match: '{{UCHAR}}'
      scope: string.quoted.double.literal.long.ttl constant.character.escape.literal.unicode.long.ttl
      set: triple_AFTER_OBJECT_LITERAL_DOUBLE_LONG_BEGIN
    - match: '\\.'
      scope: string.quoted.double.literal.long.ttl invalid.illegal.escape.ttl
      pop: true

  triple_AFTER_OBJECT_LITERAL_DOUBLE_SHORT_BEGIN:
    - meta_scope: string.quoted.double.literal.short.ttl
    - match: '{{STRING_SHORT}}+'
    - match: '"'
      scope: punctuation.definition.string.end.literal.double.short.ttl
      set: triple_AFTER_OBJECT_LITERAL_CONTENTS
    - match: '{{ECHAR_DOUBLE}}'
      scope: constant.character.escape.literal.escape.short.ttl
      set: triple_AFTER_OBJECT_LITERAL_DOUBLE_SHORT_BEGIN
    - match: '\\'''
      scope: constant.character.escape.literal.escape.pointless.short.ttl
      set: triple_AFTER_OBJECT_LITERAL_DOUBLE_SHORT_BEGIN
    - match: '{{UCHAR}}'
      scope: constant.character.escape.literal.unicode.short.ttl
      set: triple_AFTER_OBJECT_LITERAL_DOUBLE_SHORT_BEGIN
    - match: '\\.'
      scope: invalid.illegal.escape.ttl
      pop: true


  triple_AFTER_OBJECT_LITERAL_SINGLE_LONG_BEGIN:
    - meta_scope: string.quoted.single.literal.long.ttl
    - include: literalSingleLong_AFTER_QUOTE
    - match: ''''''''
      scope: punctuation.definition.string.end.literal.single.long.ttl
      set: triple_AFTER_OBJECT_LITERAL_CONTENTS
    - match: ''''''
      scope: string.quoted.single.literal.long.ttl
      push:
        - include: literalSingleeLong_AFTER_QUOTE
        - include: else_pop
    - match: ''''
      scope: string.quoted.single.literal.long.ttl
      push:
        - include: literalSingleeLong_AFTER_QUOTE
        - include: else_pop

  literalSingleLong_AFTER_QUOTE:
    - match: '[^''\\]'
      scope: string.quoted.single.literal.long.ttl
      set: triple_AFTER_OBJECT_LITERAL_SINGLE_LONG_BEGIN
    - match: '{{ECHAR_SINGLE}}'
      scope: string.quoted.single.literal.long.ttl constant.character.escape.literal.escape.single.ttl
      set: triple_AFTER_OBJECT_LITERAL_SINGLE_LONG_BEGIN
    - match: '\\"'
      scope: string.quoted.single.literal.long.ttl constant.character.escape.literal.escape.pointless.single.ttl
      set: triple_AFTER_OBJECT_LITERAL_SINGLE_LONG_BEGIN
    - match: '{{UCHAR}}'
      scope: string.quoted.single.literal.long.ttl constant.character.escape.literal.unicode.single.ttl
      set: triple_AFTER_OBJECT_LITERAL_SINGLE_LONG_BEGIN
    - match: '\\.'
      scope: string.quoted.double.literal.long.ttl invalid.illegal.escape.ttl
      pop: true

  triple_AFTER_OBJECT_LITERAL_SINGLE_SHORT_BEGIN:
    - meta_scope: string.quoted.single.literal.short.ttl
    - match: '{{STRING_SHORT}}+'
    - match: ''''
      scope: punctuation.definition.string.end.literal.single.short.ttl
      set: triple_AFTER_OBJECT_LITERAL_CONTENTS
    - match: '{{ECHAR_DOUBLE}}'
      scope: constant.character.escape.literal.escape.short.ttl
    - match: '\\'''
      scope: constant.character.escape.literal.escape.pointless.short.ttl
    - match: '{{UCHAR}}'
      scope: constant.character.escape.literal.unicode.short.ttl
    - match: '\\.'
      scope: invalid.illegal.escape.ttl
      pop: true

  triple_AFTER_OBJECT_LITERAL_CONTENTS:
    - meta_include_prototype: false
    - match: '@'
      scope: punctuation.separator.language-tag.symbol.ttl
      set: triple_AFTER_OBJECT_LITERAL_LANGTAG_SYMBOL
    - match: '\^\^'
      scope: punctuation.separator.datatype.symbol.ttl
      set: triple_AFTER_OBJECT_LITERAL_DATATYPE_SYMBOL
    - match: '(?=\s)'
      pop: true
    - include: triple_AFTER_OBJECT

  triple_AFTER_OBJECT_LITERAL_LANGTAG_SYMBOL:
    - meta_include_prototype: false
    - meta_scope: string.unquoted.language-tag.ttl
    - match: '[a-zA-Z]+'
      scope: meta.language-tag.primary.ttl
      set: triple_AFTER_OBJECT_LITERAL_LANGTAG_PRIMARY
    - include: other_illegal_pop

  triple_AFTER_OBJECT_LITERAL_LANGTAG_PRIMARY:
    - meta_include_prototype: false
    - match: '-'
      scope: punctuation.separator.language-tag.hyphen.ttl
      set: triple_AFTER_OBJECT_LITERAL_LANGTAG_SEPARATOR
    - match: '{{PLA_anything}}'
      pop: true

  triple_AFTER_OBJECT_LITERAL_LANGTAG_SEPARATOR:
    - meta_include_prototype: false
    - meta_scope: string.unquoted.language-tag.ttl
    - match: '[a-zA-Z0-9]+'
      scope: meta.language-tag.subtag.ttl
      set: triple_AFTER_OBJECT_LITERAL_LANGTAG_PRIMARY
    - include: other_illegal_pop

  triple_AFTER_OBJECT_LITERAL_DATATYPE_SYMBOL:
    - meta_include_prototype: false
    - match: '<'
      scope: punctuation.definition.iri.begin.datatype.ttl
      set: triple_AFTER_OBJECT_LITERAL_DATATYPE_IRI_BEGIN
    - match: '({{PN_PREFIX}}?)(:)'
      captures: 
        1: variable.other.readwrite.prefix-name.namespace.datatype.ttl
        2: punctuation.separator.prefix-name.namespace.datatype.ttl
      set: triple_AFTER_OBJECT_LITERAL_DATATYPE_PNAME_NS
    - include: other_illegal_pop

  triple_AFTER_OBJECT_LITERAL_DATATYPE_IRI_BEGIN:
    - match: '{{IRI}}'
      scope: string.unquoted.iri.datatype.ttl
    - match: '{{UCHAR}}'
      scope: constant.character.escape.iri.datatype.ttl
    - match: '>'
      scope: punctuation.definition.iri.end.datatype.ttl
      pop: true
    - include: other_illegal_pop

  triple_AFTER_OBJECT_LITERAL_DATATYPE_PNAME_NS:
    - meta_include_prototype: false
    - match: '{{PN_LOCAL}}'
      scope: variable.other.member.prefix-name.local.datatype.ttl
    - match: '{{PLX}}'
      scope: constant.character.escape.prefix-name.local.datatype.ttl
    - match: '\s'
      pop: true
    - include: triple_AFTER_OBJECT

  triple_AFTER_OBJECT:
    - match: ';'
      scope: punctuation.terminator.pair.ttl
      set: triple_AFTER_OBJECT_TERMINATE
    - match: ','
      scope: punctuation.terminator.object.ttl
      set: [triple_AFTER_OBJECT, triple_AFTER_PREDICATE]
    - include: comment
    - include: else_pop
  
  triple_AFTER_OBJECT_TERMINATE:
    - match: '<'
      scope: punctuation.definition.iri.begin.predicate.ttl
      set: [triple_AFTER_OBJECT, triple_AFTER_PREDICATE_IRI_BEGIN]
    - match: 'a'
      scope: support.constant.predicate.a.ttl
      set: triple_AFTER_PREDICATE
    - match: '({{PN_PREFIX}}?)(:)'
      captures: 
        1: variable.other.readwrite.prefix-name.namespace.predicate.ttl
        2: punctuation.separator.prefix-name.namespace.predicate.ttl
      set: [triple_AFTER_OBJECT, triple_AFTER_PREDICATE_PNAME_NS]
    - include: comment
    - include: else_pop

  triple_TERMINATE:
    - match: '\.'
      scope: punctuation.terminator.triple.ttl
      pop: true
    - include: comment
    - include: other_illegal_pop

  blankNodePropertyList_TERMINATE:
    - match: '\]'
      scope: punctuation.definition.blank-node-property-list.end.ttl
      pop: true
    - include: comment
    - include: other_illegal_pop

  collection_TERMINATE:
    - match: '\)'
      scope: punctuation.definition.collection.end.object.ttl
      pop: true
    - include: comment
    - include: other_illegal_pop
